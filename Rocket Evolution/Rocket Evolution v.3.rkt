#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.10 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 77 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1           0 4370 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 203
(
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e |Rocket Evolution v.3|) (read-case-sensitive #t) (teachpacks ()) ("
 #"htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f"
 #")))"
) 0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; TODO:  Improve fitness function"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;         -Generalize it"
0 0 24 29 1 #"\n"
0 0 17 3 117
(
 #";;         -Ideally come up with a 2D mathematical function that var"
 #"ies based on the location of target and obstacle."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #";; --------------------------------------Data Definetion------------"
 #"-------------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"rocket"
0 0 24 3 2 #" ["
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"vel"
0 0 24 3 1 #" "
0 0 14 3 3 #"dna"
0 0 24 3 1 #" "
0 0 14 3 7 #"fitness"
0 0 24 3 1 #" "
0 0 14 3 5 #"ticks"
0 0 24 3 3 #"]) "
0 0 24 29 1 #"\n"
0 0 17 3 57 #";; a Rocket is a (make-rocket Vec Vec DNA Fitness Number)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 3 #" [ "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #" ])"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; a Vec is a (make-vec Number Number)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"obstacle"
0 0 24 3 2 #" ["
0 0 14 3 6 #"center"
0 0 24 3 1 #" "
0 0 14 3 3 #"vel"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; a Obstacle is a (make-obstacle Vec Vec PositiveNumber PositiveNum"
 #"ber)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; a DNA is one of :"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; - \342\200\230()"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; - (cons Vec DNA)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; A LODNA (List of DNA) is one of:"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";; - '()"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; - (cons DNA LODNA)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; A LOR (List of Rocket) is one of:"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; - \342\200\230()"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; - (cons Rocket LOR)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; A Fitness is one of"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; - DEAD-FITNESS"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; - SUCCESS-FITNESS"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";; [FITNESS-BASE, FITNESS-BASE + FITNESS-RANGE] , Integer"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; - pos is the position vector"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; - vel is the velocity vector"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; - DNA is the list of acceleration vectors"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; at different stages (determined by #ticks)"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; - fitness is the likelihood that a rocket will be chosen"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; to create the gene for the next rocket,"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; based on how close the rocket got to the target"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #" ["
0 0 14 3 11 #"rocket-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"obstacle"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; A World is a (make-world LOR Obstacle)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";; --------------------------------------CONSTANTS------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; Graphical Constants"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; ----Background image"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"SCENE-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"SCENE-HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 3 #"600"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 11 #"SCENE-WIDTH"
0 0 24 3 1 #" "
0 0 14 3 12 #"SCENE-HEIGHT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; ----Target Image"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"TARGET-RADIUS"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"TARGET-IMAGE"
0 0 24 3 2 #" ("
0 0 14 3 7 #"overlay"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 7 #"overlay"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 13 #"TARGET-RADIUS"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 6 #"circle"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 13 #"TARGET-RADIUS"
0 0 24 3 1 #" "
0 0 21 3 3 #"2/3"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 14 3 13 #"TARGET-RADIUS"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; ----Rocket Image"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"ROCKET-RADIUS"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"ROCKET-IMAGE-PRE"
0 0 24 3 1 #" "
0 2          31 21 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0          10 500
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0<\0\0\0<\b"
 #"\6\0\0\0:\374\331r\0\0\22\256IDATh\201\345\233{tT\325\275"
 #"\307?\373\2343g&\311$\231\274\311$\1\22\302C4\1\304\202X\236\206\267"
 #"\350\5\361I[\257\313\253-\212b\265\217\253\275}Xm]\334j| V\305"
 #"k-\266\212E\205bx\210\240h\261 \24\v\4\303#\220\206W&0y'"
 #"\223y\317\331\367\2173\t\t\4\b\1"
 #"\324\273\356w\255Y\263f\316\336\373\354"
 #"\357\371\375\366o\377\316\336\337-\244\224"
 #"\\\n\b!\22\201Q\300U\300\345@.\220\58\0{\264\230\ah\4\\\300"
 #"\277\2002`;\260EJ\331tI\372u1\t\v!\262\201[\201\e\201\221\200"
 #"\332\303\246\"\300V`9\360\216\224\362"
 #"\310\305\351\341E\",\204\30\v\374\4"
 #"\230F\a\222\2523\a\200\370\371\v]\335i\247e\341|'@\304u\264\343\337"
 #"\21`-\360\264\224\362\323\v\356\353\205"
 #"\20\26B\214\a\36\a\306\264\375\247:sL\202B\21\261C\a\330\265L=\376"
 #"|\332\fW\a[\274;\313=HC\266,\234\357<\205\374&\340\227R\312O"
 #"z\334\347\236\20\26Bd\2O\1\337\201\223$\25\300:\352\212$K\222\22\323"
 #"\323\16uD\250\301\360\5\266|\331``Z\277\3\3717\201\237H)\253\317\273"
 #"\357\347KX\bq3\360*\220\b\340"
 #"X\260\302\245\305XE\354\204\201\231\347"
 #"{\363\363\201w\343\376\352\260/ \e"
 #"\37\231\345\214\376\325\4\334#\245|\347"
 #"|\332\3516a!\204\16\24\3\367\203"
 #"I\24\300>\271\240\227\242\t\345|n\332S\30aix>\334}\34\240\3\361"
 #"E\300\217\245\224\201\356\264\321-\302B\210x`\5P\4&Y["
 #"~_\233> !\271G=\277@\4\313\233\353\375\a\17\371;\220\376"
) 500
(
 #"\e0KJY\177\256\272\347$,\204H\303\214\222\303\333\306j\354\204\302t-"
 #"\6\355\202{~\1\b\5\211\3706\224\236\3500\266w\1\223\244\2245g\253w"
 #"V\302\321\344\341c\340J\325\231C\342"
 #"\374\205.\373\364B\347\31+|\r\360\254)u5\235$\275\3\230p\266\244\345"
 #"\214c/:f\227\23%\353xpQ\3657\215,\200}z\241\323\361\340\242\352"
 #"\350\234?\fX\36\355{\2278[\260"
 #"y\26\270\266\315\262q\323\256\270\244Q"
 #"\370B\0207\355\212\314\304\371\v]Q"
 #"\322\327b\366\275Kt\351\322\321\251g"
 #"\31\230\1*\341\eh\331\256\320\274\246"
 #"\324\325!\220\335*\245\\vj\231\323\b\v!\262\200/\1\207c\301\nW\314"
 #"\304\302\f\213\336\343\234\370+E[ "
 #"\213\222n\4\n\244\224\307:\226\351\312\245_ J\326\226\337\327v!d\3;"
 #"\266\323P\274\0\327\214\"\232~\377\\O\233\3516,:\252-\277\257-\232#"
 #"8\200\205\247\226\351DX\b1\1\230"
 #"\325\366\273'\363l`\367N\32\237\177"
 #"\32\327\314)\364z\346I\276\237\232\300"
 #"[O\377\216\344u\253hz\371\205\36"
 #"\3208?\234\322\347YB\210\242\216\327"
 #";\271\264\20b\0230\332\261`\205\313"
 #">\245\240\227\242v/\203\n\354\337\213"
 #"\357\343\365x?\376\220\201\232\302\270q\343\30=z4\5\5\5$''c\265"
 #"Z9t\350\20\267\334r\v5E\323Hz\340\341\213B\356L0\"\322\360\254"
 #"\333}<\352\332\237I)\333_n\332"
 #"\223\207\350+\336h\325\231\203f\263\211"
 #"s\221\r\224\355\306\277m\v\276\217>"
 #"\304\331\334\300\214\242\"\306\376\354\21\206"
 #"\16\35Jjj*\315\315\315\324\326\326"
 #"\342v\273\211D\"\344\345\345\261|\371rn\275\365V\\\241\20I\17\377"
 #"\347%#\254\250B\321l6\241:s\210\270\216\216\26B\214\225R\376\r:"
) 500
(
 #"XX\bQ\2\31485*\307\5\275\250\3410\236\30;F\207gP\367\343\a"
 #"\20\377\330\312\342\27_`\324\250Q("
 #"\212\202\337\357\247\246\246\206@ \200\242"
 #"t~^\241P\210\274\274<\202\301 w\334q\a\373\362\a\223\374\263_]2"
 #"\322\320)j\257\222R^\17Q\v\v!\322\201\251prP\353\341 %\317\317"
 #"$\273\246\32\325\b\323\24\23OEZ>\37\26\\\313\aC\246\301\323/P\373"
 #"\330/xk\355\6&L\230@}]\35U.\27\26\213\245\235\254\256\353\304\306"
 #"\306\22\27\27\207\315f\303\357\367\223\231"
 #"\231\311\353\257\277\316\314\2313q?\365$\211\367>\200\fG \22\6UAX"
 #"t\204-\6\241^\370\304\320\341\221O"
 #"\25B\244K)\335BJ\211\20\342\207\300\263\2523\207\364\245\37\373,IJ\f"
 #"R\362j\361\\&\37\337\0A\321\251"
 #"\241H\254\302\353c\377\235\205\243\356\346"
 #"\360\333\177A\371g)\e_[Db\214\225\246\346\26RRR\b\207\303TW"
 #"W\263o\337>\366\354\331\303\201\3\a"
 #"8z\364(\265\265\265\304\307\307\323\332"
 #"\332JMM\r1\311\311\350\232\206\"\301@\0224\f\2B\305o\261\240$'"
 #"\243\365\312\302\222\323\e-7\17K\377"
 #"\201\350y\371\335&\34j0|\356\333"
 #"\257\215\211\246\235\17I)\237k#\334\36\254NM2\36Y\275\200\231[W\221"
 #"\331|\34\214\350c\vIh\204P\274\316+\343\276\303\37V\375\223\35\215!>"
 #"Y\366\aj\217\34b\351\262w\330\277\177?---\b!\210\217\217'55"
 #"\225\254\254,\372\364\351Cff&\271\271\271ddd`\263\331\3204\r!\4"
 #"RJ\302\3410>\237\217\226\226\26\352"
 #"\353\3539~\3748G\216\34\241\242\242\202}\373\366q\240\305\2036"
 #"\270\20\353\210\253\261\215\3726\226\254"
 #"\234\263\222\356\340\326\237I)\307h"
) 500
(
 #"\35V\27Q\0\315\210\220\326\344&\275"
 #"\321ML\304\307\216\354+\31x\364\0\275\232O \220P\17\f\263\301\r\351X"
 #"v\265r\377\2567\230\247J\36\250\202"
 #"\361E\23\31\320\267\17I\361v\256\271"
 #"\346\32F\214\30\301\220!C\310\313\313\303\341p\240(\n\221H\204`0H "
 #"\20 \24\na\30\6\206a\234tCEAUU,\26\vV\253\25]\327\333"
 #"\353\325\326\326RYY\311\316\235;\331"
 #"\262e\v\237.Y\314\211\f'\261\223\247\0233e:j\242\3434\302\35\334z"
 #"\224\20\"Q\\\255sk\216\203\267\307"
 #"e\333\31qy\377H\357&\227\232\321"
 #"\3526\213\30\300\251\231\247WB\274\n"
 #"\317\365\207+\354\260\245\31>\253\207\217"
 #"k\271\342\3\310}\360QJ\236{\322"
 #",\352\365\322\324\324\204\317\347#\34\16"
 #"\237\303\1\317\f!\314!\245\353:\t\t\t$%%\1p\364\350Q6o\336"
 #"LII\t+\326}\210R4\25\373m\337E\357w\322\355\215*\177s\365\177"
 #"LM\210\272\365tQ{\ru)\261$\23\22 0?F\364\273+(\200["
 #"B\232\n\17\346\300\340X\210S\341\270"
 #"\217g\276{\220W\22\256\243ls\t\225\25\a\351\351\2a$\22\301b\261\220"
 #"\235\235\215\315f#\34\16\243i\32^"
 #"\257\227c\307\216\21\211DP\24\5\273"
 #"\335\216\323\351D\b\301\236={x\363\3157Y\264h\21\341\242\251$=\3600"
 #"jj\32\0US\307\267\255\204\376R\365x\270\376\362\fz;\244\0C\232L"
 #";\222U\201\200\204Z\240\5s\351\\\27&\351*/\24\306A\300\200<+\341"
 #"\204z\336~?\310\354[\346\220\222\234\200\256\353$&&\222\222\222Bjj*"
 #"iii\244\244\244\240\353:\301`\260\335\352m\26\4\b\207\303$'"
 #"'\223\231\231\311\373\357\277\317\242\205"
 #"\vY\262d\t\237m\332\204\252\252"
) 500
(
 #"\214\349\262}H\204\303a\352\352\352"
 #"\250\253\253#33\223\353\256\273\216\331"
 #"\263g\243VV\260\376\241\373\221\232\5"
 #"\333\320\341\220|\245\313\277\341/\361\200"
 #"[\0[\5\214\370\331\3w6\315i\330\2328\370\360^P\204iI\t\4%"
 #"d\333\240\237\325d\237\240B\212\6i"
 #"\26\323\262\232\200\\+d\250\260\253\232"
 #"\334[\202\274\262\344S\372\367up\360"
 #"\340A\334n7'N\234\240\266\266\226"
 #"c\307\314<~\362\344\311L\2300\201\254\254,\32\e\e9v\354\30\272n\276"
 #"\302\332l6\222\223\223\231;w.o"
 #"\276\371\346i\326\277\377\376\373).."
 #"\246\252\252\212P(\324\376\277\224\22\303"
 #"0\310\314\314\304\341p\260c\307\16\36"
 #"{\3541>\370\327a\364k\357\250\361,\374Q\32\260M\0G\201\354\266\b="
 #"\372\350g\334\374\321{L\335\261\36\233"
 #"\364\233\357\34\337\262\303\335N\270,\6"
 #"\254\2\252\3\320b@\320\0\rJ6\264\262vK5_\226\31l\332\v\3319"
 #"\271\304\305\232V\3244\rUU\211\215\215%99\231H$Bee%B\b"
 #"\256\276\372j\356\273\357>\6\16\34H"
 #"CC\3\0\3\6\f\340\347\277\370\5"
 #"\277\375\315o\210MJ\342\276\347\236e"
 #"\342\300A\34\330\273\227\371\367\335\207\364"
 #"\371x\272\270\230\37=\3740\373\367\357"
 #"\357\344\35\35\211\347\345\345a\265ZY\274x1\367\336{o[`\254\22QG"
 #"\265\237:%\335\363\321\377\360\363\225\vLK7I\260\1\203\342a`\f\f\213"
 #"\a\207\na\3\372Z\0310\254\214\303"
 #"r\6\317\375\367|\262\222C\4\374-\304\306\332q8\34\330\355vl6\e\206"
 #"a\20\b\4\3204\r\253\325Jyy9w\335u\27iii\354\336\275\233\212"
 #"\212\n,\26\vqqq\24\16\36LuM\r\277?"
 #"p\200\242\374|\372EG\326\237\276\330\316\35W}\213\364"
) 500
(
 #"\224\24J\313\312\b\6\203\370|\2763\306\1\233\315Fnn.\a\16\34`\336"
 #"\274y\254_\277>\244qrc\v\200>\356#\334\274\355]f\354^s2B"
 #"\307\v\323\17\276l\205\276\36\350e\201"
 #"\254\4h0\300\n\343\v5\326W\31"
 #"\304q\214\225\177\375\214\226\226\26|>\37^\257\27\237\317O(\24D\b\5U"
 #"U\b\6\203dgg\363\320C\17\361\370\343\217S\\\\Lee%\26\213\5"
 #"UUimm\245\256\246\6\24\301\220\374|vb:\331\b`\306\360\253@\200"
 #"\273\256\16\267\333Mzz\372\31\t\253"
 #"\252\212\327\353\305\343\361\320\277\177\177\234"
 #"N'\200EDG*\337~\364\31\367\275\326\177\244\177g\343\333'k\t\314$"
 #"CWa\214\3\206\333!\307\naLw\26@/\215/K\375\24\314:\4\300"
 #"\270q\343\361\266z@(\350\272I\302"
 #"j\265\22\23\23\203\303\341\300\357\367\263"
 #"lY\347\205\210\255[\267\322\257_?"
 #"\32\e\e\311\311\311\341\232\21#\371b\327N^\256\250`R^\36'0\23\205"
 #"\227\337_\311\275\3776\223!\5\5|"
 #"\276m\e.\227\253\313\351\3160\f\204\20\f\348\220\352\352jn\272\351f6"
 #"o\376;@PM\200\237\224\\\216\376\333\226uq\205\25e'\267\302\f\31\r"
 #"Z@\234\200I\311\220\23k^\27Q"
 #"\302\212\200\246\b\351\203\255\\w\225\215"
 #"\335\25V\24=\t\315bE\327-\355ID[\366\344v\273\361\373\375\24\24\24"
 #"\220\235\235MNN\16EEEL\2324\t)%\201@\200\264\2644\24M\243"
 #"\244\244\204\317\226/'c\360e466\262\360\217Kx\362\236\357\3\360\352k"
 #"\2571\240\177\177\352\352\352N\e\303\341"
 #"p\230\224\224\24\372\364\351\303\332\265k\2316m\32\25\31\203Z\214"
 #"\303\373\254@\223H\217\245\352\335!8\263\355ia\335\256k\361\241V"
) 500
(
 #"\264P\bEH\244\0\241B\304\17qn\37X$$\351po\2469\226\233\302"
 #"\346C1$\f\211\241zc%\2717\265\362\352\e+\31zE.~\277\277="
 #"[\352\370m\261X\332_24M\343\310\221#\4\2\1TUEUUz\367"
 #"\356\315\274y\363x\365\325WO\263\336\242E\213\2307o\336i\1\3130\f4"
 #"M#??\237\346\346f\236x\342\t\236\371\343\22R~\275\200PKr[z"
 #"yXs{96v\vN\307\202\305\356\204\351\205\316\30\277\27\213\21BQ%"
 #">\325F@\263\261\340\365\377\342\366\235"
 #"\1771\255\2757\4'\0020,\326\334\335\321\2059=\351*\207k|d:\a"
 #"0yr\21\261\272\201\307\343\3010\214"
 #"\366\310\31\n\205\b\4\2\235\22\222\266"
 #"\353j\364\355(\30\f\342v\273y\361"
 #"\305\27\0313f\fkW\257\246\271\271"
 #"\231\301\227_\316\354\233nb\344\310\221"
 #"\34<h&5B\210\366\264\264o\337\276\330l6V\256\\\311\243\217>\312\341"
 #"\374\313p\276\277\36\305\36OhMi\333\355Nh@%fL\0\300g\213\245"
 #"c\30\270~\307*\246\227\2555\1774\3ct\230\222l\22\315\264@m\4\312"
 #"}\260\271\221\217~c\2408\363HJ\264r\344\320\241N9rw\241\252*\315"
 #"\315\315\370|>n\273\3556\346\314\231C$\22A\327u\32\e\e\331\273w/"
 #"\212\242\264\223u:\235$$$\260m\3336\212\213\213Y\361\217/H|\350\247"
 #"\244\216\237\330U\363\225\32\346\n\345\255"
 #"-\v\347;\23\246\177\322~E\221\6"
 #"O\377\365\247\314\336\260\302L.\302\22"
 #"T\1\223S\240!\f\333[\240\322\a\345^p\a!\f\237\34\206I?\234\215"
 #"\256i\204B\241v\253\365\204\264a\30\355\363uGK\n!\260X"
 #",deea\265Z\331\263g\17/\277\3742\213\26/&\376\256"
) 500
(
 #"\271d\256\374\360\264\366\3326\332\2012"
 #"\r\370\242\355\202Q\345oV\262l\tY5.6\375j<\252-b\6(\211"
 #"I6]\302\352\32XR\r\365\22BP\323/\215U\223\247\361ee+\37\355"
 #"\\\305\240\23\2071\f\203\313.\273\214"
 #"\246\246&jkk\t\207\303\247\5\227\356\242m8X,\26RRRHLL"
 #"\304\353\365\262i\323&\226-[\306\237"
 #"\337{\17u\306\215d\256\336\210\226\236"
 #"qZ}\243\312\337\f$D\177n\327\200\315@$\342:\252zw\225{\354Y"
 #"\205\t\206\"\330z\345\br+\17\341"
 #"\320\232\220\2\232\254\211\324\306\247Re"
 #"\317\244\362\212<\312\373\344\263\253w\1"
 #"\25\351\371(\a\366\343Z\371+\276\373"
 #"\275\357\361\361{o\223\363\306\37\230>}:7\336x#\243F\215\302\341p\20"
 #"\16\207ijj\302\353\365\22\f\6\221R\266\177\332\320fMEQ\320u\35\273"
 #"\335NBB\2\212\242\320\334\334LY"
 #"Y\31\237~\372)\253W\257\346\363\352\343\304^\177#)+\326\241$\235yq"
 #"\325\273\253\334\23q\35M\300\224Nl"
 #"\321\244\224MB\210-\300\350\266\21W"
 #"\235\222\311\355w\377\31\244$\301\327\f"
 #"\210\323\326\264\332\320\374\366\237h|v"
 #"!\257\275\362<\267\3374\233\322\322R\336z\353->\370\340\3JJJHM"
 #"Me\320\240A\f\37>\234a\303\206\321\257_?222\210\211\211\301b\261"
 #"\234f\315p8\214\337\357\247\276\276\236"
 #"\262\2622\312\313\313\331\265k\27[\267"
 #"ne\373\321*\254\327\214!\356{\367\340\0345\272[\36\322!\212l\221R6"
 #"\236y\211\347\34\220~\0375\217<\304"
 #"\345\255\36\236/~\212\334\334\\\366\354\331C\\\\\34N\247\223H$BYY"
 #"\31\e7nd\373\366\355TWW\23\f\6\1\310"
 #"\311\311!;;\233\370\370xbbbP\24\205p8"
) 500
(
 #"\214\327\353\245\261\261\221\232\232\32\216U"
 #"U\3412@\311\357\217^0\224\230+"
 #"\277\205u\350\225\335\"\331\206\263-\361"
 #"\244\3U\200\226\274`\3059\267D#"
 #"\325.\252\246\214a\332\264i\224\224\224"
 #"\20\n\205\370\374\363\3171\f\3EQ"
 #"\332\247\f\273\335NRR\22\272\256\323"
 #"\320\320\300\301\203\aQ\24\205e\313\226"
 #"\261t\351Rbg\337\216\336\267/2\24\4\315\202\32gGq8P\3232P"
 #"3\235h\31\275\316\213\340\251\360\254)"
 #"u\325\233\363o\30\310\222R\2725\0"
 #")\245[\b\261\16\270\256[\23\211\256\23;c\26e\225\a\2303g\16EE"
 #"E\214\35;\226\370\370x\\.\27---\346\r=\236\366\271X\3234\246L"
 #"\231\302\256]\273(//'\361\341GH\274\363\236\v\"t.t\340\262NJ"
 #"\351\206\316\353\322c\201OUg\16I?]\\\35{\355\200sn\217J\257\227"
 #"\326U+\360\274\3736\205\366Xf\315"
 #"\232\305\304\211\23\311\311\311\241\276\276\236"
 #"\232\232\32\"\221\bV\253\225A\203\6"
 #"\261|\371r\346\316\235K\362\357\236'"
 #"n\312u\227\206e\24\336\217\313\253\e"
 #"~\367\375\314\250;\217;m!\36z\276\325\2\340\333\364\t\236w\227\222r`"
 #"\0377\334p\3\323\247O\247\260\260\20"
 #"!\4\272\256\363\322K/\361\353\247\236"
 #"\"\375\245?\236\367X<_\234m\253"
 #"\345T\302E\300\6\350\371\276p\260\342"
 #" \236\25\357\20X\263\222\251\243\256\346"
 #"\316;\357d\323\246M,Z\276\202\264\305o`qf_\4Jg\307)\373\304"
 #"\223\244\224\e\332\256u\265?\274\34\230"
 #"u\241J\35\243\325\203w\365\3734/"
 #"]\202\22\237@\306\3427\20\266\213\242W;+NQ\370\254\220R\336\330\361z"
 #"W\204\263\201\335\374\177\331\20\217\26\370\1\230\342/\337\206"
 #"\322\23_Io/\2:\220\5\370\301\251d\341\f\242\226"
) 339
(
 #"\2506\342%0\23o\317\232\322n\251"
 #"a\277Nx\326\224\272:\274$\274\324"
 #"\225\276\3\316\242\323\212J\177\326\1\343"
 #"\333dK\337T%O\353\332/\253\e\237\277\277m\n\372\ef\240\nvU\366"
 #"\\\302\264\24`#P\360\177D\230\266\eS\230Vw\246\362\335\221\36\246cZ"
 #"zh\233\364\360\233\20\310\272\220\36\356\6&\266eTgBw\305\245\t\300_"
 #"\201\t\360\215\24\227n\2f^\24qi{A!\254\230\362\341y`\222V0"
 #"\245\177=\353v\317\340YS\3522\350$\37\376=\360\360E\225\17w\252\320A"
 #" \336\346\342_\245@\274\203\v7\3w_2\201x\247J\346\21\200\247\2019"
 #"\360\265\34\1X\n\374\350+9\2\320"
 #"\251\262y\310\343\t\240}\371\241\215\274*\24a\35> ^K\327\355gl\240"
 #"\v\204\335!O\340\213\375-\221\256\17"
 #"y\374\35\370\205\224rc\217\373|\221"
 #"\216\361\214\343\3441\236\366d\346\"\35\34310\5\352O}\355\307xNkL"
 #"\210\336\300-\230\a\265Fpa\a\265\266a\352\265\227}\343\16ju\331p\347"
 #"\243x\5\230G\361R\351\372(^-\346\206\300n.\361Q\274\377"
 #"\5\b`\302^m\256[\325\0\0\0\0IEND\256B`\202"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"ROCKET-IMAGE"
0 0 24 3 2 #" ("
0 0 14 3 5 #"scale"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 13 #"ROCKET-RADIUS"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 2 #") "
0 0 14 3 16 #"ROCKET-IMAGE-PRE"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; ----OBSTACLE CONSTANTS"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"OBSTACLE-COLOR"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"OBSTACLE-TYPE"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; Position Constants"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; ---Rocket Initial Position"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 23 #"ROCKET-INITIAL-POSITION"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; ---Target Position"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"TARGET-X"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 11 #"SCENE-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 3 #"4/5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"TARGET-Y"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"TARGET-POSITION"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 14 3 8 #"TARGET-X"
0 0 24 3 1 #" "
0 0 14 3 8 #"TARGET-Y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; ---CORNERS"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOP-LEFT"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"TOP-RIGHT"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 14 3 11 #"SCENE-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"BOTTOM-LEFT"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 12 #"SCENE-HEIGHT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"BOTTOM-RIGHT"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 14 3 11 #"SCENE-WIDTH"
0 0 24 3 1 #" "
0 0 14 3 12 #"SCENE-HEIGHT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"LIST-OF-CORNERS"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOP-LEFT"
0 0 24 3 1 #" "
0 0 14 3 9 #"TOP-RIGHT"
0 0 24 3 1 #" "
0 0 14 3 11 #"BOTTOM-LEFT"
0 0 24 3 1 #" "
0 0 14 3 12 #"BOTTOM-RIGHT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; Fitness Constants"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"FITNESS-BASE"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"FITNESS-RANGE"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"OBSTACLE-PENALTY"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.01"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"DEAD-PENALTY"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.05"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"SUCCESS-FITNESS"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"PASS-OBSTACLE-FITNESS"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; Rocket population / genetic Constants"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"POPULATION"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 2 #") "
0 0 17 3 31 #";;number of rockets in the list"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; ---- Genetics"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"LIFESPAN"
0 0 24 3 1 #" "
0 0 21 3 2 #"80"
0 0 24 3 2 #") "
0 0 17 3 31 #";; number of vectors in the DNA"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"GENE-AX-LIMIT"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 17 3 59
#";; The variable range for gene's x component, centered at 0"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"GENE-AY-LIMIT"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 17 3 59
#";; The variable range for gene's y component, centered at 0"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"VELX-LIMIT"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #") "
0 0 17 3 63
#";; The variable range for velocity's x component, centered at 0"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"VELY-LIMIT"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #") "
0 0 17 3 63
#";; The variable range for velocity's y component, centered at 0"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"MUTATION-RATE"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.01"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; Game / Simulation Constants"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"INITIAL-FITNESS"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 17 3 79
(
 #";; This represents the state when the rocket has NOT hit anything(st"
 #"ill flying)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"UNIT-TIME"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 17 3 37 #";; change the velocity every 10 ticks"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"TOTAL-TICKS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 9 #"UNIT-TIME"
0 0 24 3 1 #" "
0 0 14 3 8 #"LIFESPAN"
0 0 24 3 3 #")) "
0 0 17 3 65
#";; This determines the total number of ticks in a simulation/game"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"INITIAL-VELOCITY"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"initial-obstacle"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-obstacle"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 3 #"700"
0 0 24 3 1 #" "
0 0 21 3 3 #"350"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 2 #"25"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #";; --------------------------------------Data Examples--------------"
 #"-----------------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"R1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-rocket"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 3 #"130"
0 0 24 3 1 #" "
0 0 21 3 2 #"70"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 2 #"-3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"R2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-rocket"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 1 #" "
0 0 21 3 3 #"140"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 2 #"-3"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"R3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-rocket"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 2 #"70"
0 0 24 3 1 #" "
0 0 21 3 3 #"140"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 2 #"-3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"OBS1"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-obstacle"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 3 #"700"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"OBS2"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-obstacle"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 3 #"-10"
0 0 24 3 2 #") "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"LOR1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"R1"
0 0 24 3 1 #" "
0 0 14 3 2 #"R2"
0 0 24 3 1 #" "
0 0 14 3 2 #"R3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";; --------------------------------------DATA TYPE TEMPLATES--------"
 #"-----------------------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Obstacle -> ??"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; Template for Obstacle"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"temp-obstacle"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 8 #"temp-vec"
0 0 24 3 2 #" ("
0 0 14 3 15 #"obstacle-center"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 2 #"))"
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 8 #"temp-vec"
0 0 24 3 2 #" ("
0 0 14 3 12 #"obstacle-vel"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 2 #"))"
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 14 #"obstacle-width"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 1 #")"
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 15 #"obstacle-height"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 1 #")"
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Vec -> ???"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; Template for Vec"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"temp-vec"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 6 #"vec-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 6 #"vec-v2"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";; --------------------------------------GAME Functions-------------"
 #"------------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; Number -> ??"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; Initates the game"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"game"
0 0 24 3 1 #" "
0 0 14 3 4 #"void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"big-bang"
0 0 24 3 2 #" ("
0 0 14 3 14 #"initiate-world"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 7 #"to-draw"
0 0 24 3 1 #" "
0 0 14 3 6 #"render"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 12 #"update-world"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 9 #"stop-when"
0 0 24 3 1 #" "
0 0 14 3 10 #"game-over?"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; ??? -> World"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; Initate a World with population number"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; and lifespan(length of DNA list) given"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"initiate-world"
0 0 24 3 1 #" "
0 0 14 3 4 #"void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 20 #"initiate-rocket-list"
0 0 24 3 2 #" ("
0 0 14 3 14 #"initiate-lodna"
0 0 24 3 1 #" "
0 0 14 3 10 #"POPULATION"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 16 #"initial-obstacle"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #";;--------------------------------UPDATE FUNCTIONS------------------"
 #"--------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; World -> World"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; Update the state of the world by moving rockets"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"update-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 18 #"update-rocket-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-rocket-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"world-obstacle"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 15 #"update-obstacle"
0 0 24 3 2 #" ("
0 0 14 3 14 #"world-obstacle"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; LoR Obstacle -> LoR"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; updates the rocket's position based on the gene"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; Also checks whether any rocket has crashed into obstacle"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; if the rocket's fitness is non-zero(has hit boundary or target)"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; return the original rocket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"update-rocket-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"lor"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"rocket"
0 0 24 3 3 #") ("
0 0 14 3 13 #"update-rocket"
0 0 24 3 1 #" "
0 0 14 3 6 #"rocket"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 3 #"lor"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; Rocket Obstacle -> Rocket"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; Update the state of rocket, including"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; pos, vel, and fitness. If the rocket's fitness is not INITIAL-FIT"
 #"NESS,"
) 0 0 24 29 1 #"\n"
0 0 17 3 53 #";; it has hit something, and it will not be modified."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"update-rocket"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 15 #"INITIAL-FITNESS"
0 0 24 3 2 #" ("
0 0 14 3 14 #"rocket-fitness"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 22 #"increment-rocket-ticks"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"current-acceleration"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rocket-dna"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 8 #"quotient"
0 0 24 3 2 #" ("
0 0 14 3 12 #"rocket-ticks"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 14 3 9 #"UNIT-TIME"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"update-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"vel"
0 0 24 3 3 #") ("
0 0 14 3 7 #"vector+"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"vel"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"update-velocity"
0 0 24 3 1 #" "
0 0 14 3 3 #"vel"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #") ("
0 0 14 3 7 #"vector+"
0 0 24 3 1 #" "
0 0 14 3 3 #"vel"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 11 #"make-rocket"
0 0 24 3 2 #" ("
0 0 14 3 15 #"update-position"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rocket-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 10 #"rocket-vel"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 15 #"update-velocity"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rocket-vel"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 14 3 20 #"current-acceleration"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 10 #"rocket-dna"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 14 #"update-fitness"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rocket-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 14 3 3 #"obs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 12 #"rocket-ticks"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; Rocket -> Rocket"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; Increment the rocket's tick field by 1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"increment-rocket-ticks"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"make-rocket"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rocket-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"rocket-vel"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"rocket-dna"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 14 #"rocket-fitness"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 12 #"rocket-ticks"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; Vec Obstacle -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; checks if rocket has hit the border or target"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; and return the fitness based on that"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"update-fitness"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 11 #"hit-border?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 14 3 12 #"DEAD-PENALTY"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 13 #"hit-obstacle?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 2 #") "
0 0 14 3 16 #"OBSTACLE-PENALTY"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 11 #"hit-target?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 14 3 15 #"SUCCESS-FITNESS"
0 0 24 3 2 #"] "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 15 #"INITIAL-FITNESS"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Vec -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; Return true if the rocket has hit target"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"hit-target?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 15 #"vector-distance"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 15 #"TARGET-POSITION"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 13 #"ROCKET-RADIUS"
0 0 24 3 1 #" "
0 0 14 3 13 #"TARGET-RADIUS"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Vec -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; Return true if the rocket has hit any of"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; the borders"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"hit-border?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hit-top?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"hit-bottom?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"hit-left?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"hit-right?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Vec -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; Return true if the rocket has hit top"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hit-top?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v2"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 14 3 13 #"ROCKET-RADIUS"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Vec -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; Return true if the rocket has hit bottom"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"hit-bottom?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v2"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 12 #"SCENE-HEIGHT"
0 0 24 3 1 #" "
0 0 14 3 13 #"ROCKET-RADIUS"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Vec -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; Return true if the rocket has hit left"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hit-left?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"<"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"vec-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 14 3 13 #"ROCKET-RADIUS"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Vec -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; Return true if the rocket has hit right"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"hit-right?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #">"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"vec-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #"  "
0 0 14 3 11 #"SCENE-WIDTH"
0 0 24 3 1 #" "
0 0 14 3 13 #"ROCKET-RADIUS"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; Vec Obstacle -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; Return true if the rocket has hit any part of the obstacle"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"hit-obstacle?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"px"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"py"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v2"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"obs-x"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v1"
0 0 24 3 2 #" ("
0 0 14 3 15 #"obstacle-center"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"obs-y"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v2"
0 0 24 3 2 #" ("
0 0 14 3 15 #"obstacle-center"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"obs-width"
0 0 24 3 2 #" ("
0 0 14 3 14 #"obstacle-width"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"obs-height"
0 0 24 3 2 #" ("
0 0 14 3 15 #"obstacle-height"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 36 #";; position of the sides of obstacle"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"obs-x"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 9 #"obs-width"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #" "
0 0 14 3 9 #"obs-width"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"top"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"obs-y"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 10 #"obs-height"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"bottom"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"top"
0 0 24 3 1 #" "
0 0 14 3 10 #"obs-height"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 71
(
 #";; determine which region the rocket is at with respect to the obsta"
 #"cle"
) 0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"left?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 6 #"bottom"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 3 #"top"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"right?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 6 #"bottom"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 3 #"top"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"top?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 3 #") ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 6 #"bottom"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"bottom?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 3 #") ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 3 #"top"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"top-left?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 3 #"top"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"top-right?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 3 #"top"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bottom-left?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 6 #"bottom"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"bottom-right?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 6 #"bottom"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"hit-any-part?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 5 #"left?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 13 #"ROCKET-RADIUS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 2 #"px"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 6 #"right?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 13 #"ROCKET-RADIUS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"px"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 4 #"top?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 13 #"ROCKET-RADIUS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"top"
0 0 24 3 1 #" "
0 0 14 3 2 #"py"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 7 #"bottom?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 13 #"ROCKET-RADIUS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"py"
0 0 24 3 1 #" "
0 0 14 3 6 #"bottom"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 9 #"top-left?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 13 #"ROCKET-RADIUS"
0 0 24 3 2 #" ("
0 0 14 3 15 #"vector-distance"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 3 #"top"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 10 #"top-right?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 13 #"ROCKET-RADIUS"
0 0 24 3 2 #" ("
0 0 14 3 15 #"vector-distance"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #" "
0 0 14 3 3 #"top"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 12 #"bottom-left?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 13 #"ROCKET-RADIUS"
0 0 24 3 2 #" ("
0 0 14 3 15 #"vector-distance"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 6 #"bottom"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 13 #"bottom-right?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 13 #"ROCKET-RADIUS"
0 0 24 3 2 #" ("
0 0 14 3 15 #"vector-distance"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #" "
0 0 14 3 6 #"bottom"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"hit-any?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"hit-any-part?"
0 0 24 3 1 #" "
0 0 14 3 2 #"px"
0 0 24 3 1 #" "
0 0 14 3 2 #"py"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 8 #"hit-any?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; Obstacle -> Obstacle"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; Update the position of the obstacle"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"update-obstacle"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"obs-x"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v1"
0 0 24 3 2 #" ("
0 0 14 3 15 #"obstacle-center"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"obs-y"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v2"
0 0 24 3 2 #" ("
0 0 14 3 15 #"obstacle-center"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"obs-hit-top?"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 15 #"obstacle-height"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"obs-y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"obs-hit-bottom?"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 12 #"SCENE-HEIGHT"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 15 #"obstacle-height"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 14 3 5 #"obs-y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"obs-hit-left?"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 14 #"obstacle-width"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"obs-x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"obs-hit-right?"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 11 #"SCENE-WIDTH"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 14 #"obstacle-width"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 14 3 5 #"obs-y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"rev-y"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"rev-x"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"reverse-vel-if-hit"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 12 #"obs-hit-top?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"vec-combine"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 5 #"rev-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 15 #"obs-hit-bottom?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"vec-combine"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 5 #"rev-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 13 #"obs-hit-left?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"vec-combine"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 5 #"rev-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 14 #"obs-hit-right?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"vec-combine"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 5 #"rev-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"])))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"make-obstacle"
0 0 24 3 2 #" ("
0 0 14 3 7 #"vector+"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"obstacle-center"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 3 #") ("
0 0 14 3 12 #"obstacle-vel"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 18 #"reverse-vel-if-hit"
0 0 24 3 2 #" ("
0 0 14 3 12 #"obstacle-vel"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 14 #"obstacle-width"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 15 #"obstacle-height"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;----------------------------RENDER FUNCTIONS----------------------"
 #"---"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; world -> image"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"render-target"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 11 #"place-image"
0 0 24 3 1 #" "
0 0 14 3 12 #"TARGET-IMAGE"
0 0 24 3 1 #" "
0 0 14 3 8 #"TARGET-X"
0 0 24 3 1 #" "
0 0 14 3 8 #"TARGET-Y"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            )"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"render-target"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 15 #"render-obstacle"
0 0 24 3 2 #" ("
0 0 14 3 14 #"world-obstacle"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 19 #"display-rocket-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-rocket-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; Obstacle Image -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; Render the obstacle onto given image"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"render-obstacle"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"obs-x"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v1"
0 0 24 3 2 #" ("
0 0 14 3 15 #"obstacle-center"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"obs-y"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v2"
0 0 24 3 2 #" ("
0 0 14 3 15 #"obstacle-center"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"obs-image"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 24 3 2 #" ("
0 0 14 3 14 #"obstacle-width"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 15 #"obstacle-height"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 14 3 13 #"OBSTACLE-TYPE"
0 0 24 3 1 #" "
0 0 14 3 14 #"OBSTACLE-COLOR"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"place-image"
0 0 24 3 1 #" "
0 0 14 3 9 #"obs-image"
0 0 24 3 1 #" "
0 0 14 3 5 #"obs-x"
0 0 24 3 1 #" "
0 0 14 3 5 #"obs-y"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; display-rocket-list : LoR  -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; displays the rockets on the screen"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"display-rocket-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"lor"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"rocket"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 3 #") ("
0 0 14 3 14 #"display-rocket"
0 0 24 3 1 #" "
0 0 14 3 6 #"rocket"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 10 #"BACKGROUND"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 3 #"lor"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; Rocket Image -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; Render a rocket onto the given image based on"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; its position field"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"display-rocket"
0 0 24 3 1 #" "
0 0 14 3 6 #"rocket"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 12 #"slant-rocket"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rocket-vel"
0 0 24 3 1 #" "
0 0 14 3 6 #"rocket"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"vec-v1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rocket-pos"
0 0 24 3 1 #" "
0 0 14 3 6 #"rocket"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"vec-v2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rocket-pos"
0 0 24 3 1 #" "
0 0 14 3 6 #"rocket"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 3 #"img"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; Vector -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; Slant the rocket image by a certain angle,"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; based on vector's direction"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"slant-rocket"
0 0 24 3 1 #" "
0 0 14 3 3 #"vel"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"rotate"
0 0 24 3 2 #" ("
0 0 14 3 12 #"vel-to-angle"
0 0 24 3 1 #" "
0 0 14 3 3 #"vel"
0 0 24 3 2 #") "
0 0 14 3 12 #"ROCKET-IMAGE"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; Vector -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; Convert velocity vector into a degree angle value"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"vel-to-angle"
0 0 24 3 1 #" "
0 0 14 3 3 #"vel"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v2"
0 0 24 3 1 #" "
0 0 14 3 3 #"vel"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 3 #"180"
0 0 24 3 1 #" "
0 0 14 3 2 #"pi"
0 0 24 3 3 #") ("
0 0 14 3 4 #"asin"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v2"
0 0 24 3 1 #" "
0 0 14 3 3 #"vel"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 15 #"vector-distance"
0 0 24 3 1 #" "
0 0 14 3 3 #"vel"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            ))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v1"
0 0 24 3 1 #" "
0 0 14 3 3 #"vel"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 5 #"angle"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 3 #"180"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";;---------------------------STOP-WHEN-CLAUSE-FUNCTIONS-------------"
 #"--------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; World -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";; Returns true when the total amount of ticks is reached. (LIFESPAN"
 #" * UNIT-TIME)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"game-over?"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 8 #"LIFESPAN"
0 0 24 3 1 #" "
0 0 14 3 9 #"UNIT-TIME"
0 0 24 3 3 #") ("
0 0 14 3 12 #"rocket-ticks"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-rocket-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;------------------------SIMULATION FUNCTIONS----------------------"
 #"-----"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Number -> "
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; initiates the program, with number of simulations given by input"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"simulator"
0 0 24 3 1 #" "
0 0 14 3 10 #"simulation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"simulations"
0 0 24 3 2 #" ("
0 0 14 3 14 #"initiate-lodna"
0 0 24 3 1 #" "
0 0 14 3 10 #"POPULATION"
0 0 24 3 2 #") "
0 0 14 3 10 #"simulation"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; LODNA Number -> LODNA"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; processes simulations of the game n times,"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; initiates rockets in each game using the given LODNA"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; return the final evolved LODNA"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"simulations"
0 0 24 3 1 #" "
0 0 14 3 5 #"lodna"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 5 #"lodna"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"simulations"
0 0 24 3 2 #" ("
0 0 14 3 13 #"simulate-game"
0 0 24 3 1 #" "
0 0 14 3 5 #"lodna"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.001"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"simulations"
0 0 24 3 2 #" ("
0 0 14 3 13 #"simulate-game"
0 0 24 3 1 #" "
0 0 14 3 5 #"lodna"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.01"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"simulation time less than zero!\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; LODNA Number -> LODNA"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; simulate a single game with given LODNA and tick-rate"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; returns the LODNA of evolved child generation"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"simulate-game"
0 0 24 3 1 #" "
0 0 14 3 5 #"lodna"
0 0 24 3 1 #" "
0 0 14 3 9 #"tick-rate"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"evolve"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 18 #"update-lor-fitness"
0 0 24 3 2 #" ("
0 0 14 3 8 #"big-bang"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 20 #"initiate-rocket-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"lodna"
0 0 24 3 2 #") "
0 0 14 3 16 #"initial-obstacle"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ["
0 0 14 3 7 #"to-draw"
0 0 24 3 1 #" "
0 0 14 3 6 #"render"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ["
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 12 #"update-world"
0 0 24 3 1 #" "
0 0 14 3 9 #"tick-rate"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ["
0 0 14 3 9 #"stop-when"
0 0 24 3 1 #" "
0 0 14 3 10 #"game-over?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ["
0 0 14 3 13 #"close-on-stop"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 5 #"]))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";---------------------------GENETIC ALGORITHM-----------------------"
 #"-----------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";; creates an evolved list of dnas from a list of rockets"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; LoR -> LoDNA"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"evolve"
0 0 24 3 1 #" "
0 0 14 3 3 #"lor"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"generate-lodna"
0 0 24 3 2 #" ("
0 0 14 3 15 #"make-index-pool"
0 0 24 3 1 #" "
0 0 14 3 3 #"lor"
0 0 24 3 3 #") ("
0 0 14 3 13 #"make-dna-pool"
0 0 24 3 1 #" "
0 0 14 3 3 #"lor"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";--------------------------CROSSOVER FUNCTIONS----------------------"
 #"----"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; LoR -> LoN"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; makes the mating pool of indexes from a list of rockets"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"make-index-pool"
0 0 24 3 1 #" "
0 0 14 3 3 #"lor"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 18 #";; Rocket -> LoDNA"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"multiply-index"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"current-rocket"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"lor"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    )"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"make-list"
0 0 24 3 2 #" ("
0 0 14 3 14 #"rocket-fitness"
0 0 24 3 1 #" "
0 0 14 3 14 #"current-rocket"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"foldr"
0 0 24 3 1 #" "
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 10 #"build-list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lor"
0 0 24 3 2 #") "
0 0 14 3 14 #"multiply-index"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; LOR -> LODNA"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; extracts the dna from each rocket in lor"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; to make a list of dna"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-dna-pool"
0 0 24 3 1 #" "
0 0 14 3 3 #"lor"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 10 #"rocket-dna"
0 0 24 3 1 #" "
0 0 14 3 3 #"lor"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; lon lodna -> lodna"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; Use list-of-dna (mating pool)"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; to return list of child dnas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"generate-lodna"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 1 #" "
0 0 14 3 5 #"lodna"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"get-random-item"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-parent-dna"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-lodna"
0 0 24 3 3 #") ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-lodna"
0 0 24 3 2 #" ("
0 0 14 3 15 #"get-random-item"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"build-list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 5 #"lodna"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 13 #"crossover-dna"
0 0 24 3 1 #" "
0 0 14 3 5 #"lodna"
0 0 24 3 2 #" ("
0 0 14 3 21 #"get-random-index-pair"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; lon -> vec"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; Returns a pair of distinct index randomly picked from lon"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"get-random-index-pair"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"get-random-index"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"index-one"
0 0 24 3 2 #" ("
0 0 14 3 16 #"get-random-index"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"get-random-index-not"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" (("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"index-two"
0 0 24 3 2 #" ("
0 0 14 3 16 #"get-random-index"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 9 #"index-two"
0 0 24 3 3 #") ("
0 0 14 3 20 #"get-random-index-not"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 9 #"index-two"
0 0 24 3 4 #"])))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 14 3 9 #"index-one"
0 0 24 3 2 #" ("
0 0 14 3 20 #"get-random-index-not"
0 0 24 3 1 #" "
0 0 14 3 9 #"index-one"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; LODNA Vec -> DNA"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; Take the corresponding parent dnas out from lodna"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; based on indexes in the vec, then cross over them"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"crossover-dna"
0 0 24 3 1 #" "
0 0 14 3 5 #"lodna"
0 0 24 3 1 #" "
0 0 14 3 9 #"index-vec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 20 #"crossover-dna-helper"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 5 #"lodna"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v1"
0 0 24 3 1 #" "
0 0 14 3 9 #"index-vec"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 5 #"lodna"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v2"
0 0 24 3 1 #" "
0 0 14 3 9 #"index-vec"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; DNA DNA-> DNA"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; accepts two rocket-dna and returns a new dna"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; counter should be inputted as 0"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"crossover-dna-helper"
0 0 24 3 1 #" "
0 0 14 3 12 #"parent-dna-a"
0 0 24 3 1 #" "
0 0 14 3 12 #"parent-dna-b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 12 #"parent-dna-a"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 12 #"parent-dna-a"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 15 #"cross-over-gene"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 12 #"parent-dna-a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 12 #"parent-dna-b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 20 #"crossover-dna-helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 12 #"parent-dna-a"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 12 #"parent-dna-b"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Vec Vec -> Vec"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; Crossover two acceleration gene vectors"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; the resulted vector's 2 fields are randomly picked"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; from one of the parent's corresponding field"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"cross-over-gene"
0 0 24 3 1 #" "
0 0 14 3 4 #"veca"
0 0 24 3 1 #" "
0 0 14 3 4 #"vecb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"random-pick"
0 0 24 3 1 #" "
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"mutate"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 2 #" ("
0 0 14 3 11 #"random-pick"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v1"
0 0 24 3 1 #" "
0 0 14 3 4 #"veca"
0 0 24 3 3 #") ("
0 0 14 3 6 #"vec-v1"
0 0 24 3 1 #" "
0 0 14 3 4 #"vecb"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 11 #"random-pick"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v2"
0 0 24 3 1 #" "
0 0 14 3 4 #"veca"
0 0 24 3 3 #") ("
0 0 14 3 6 #"vec-v2"
0 0 24 3 1 #" "
0 0 14 3 4 #"vecb"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 3 22 #"                      "
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";--------------------------MUTATION FUNCTIONS-----------------------"
 #"---"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Vec -> Vec"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; Based on Mutation Chance Constant, generate one of :"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";; --a mutated vec with either one of the fields, or both"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;   fields randomly updated"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; --the original vec"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"mutate"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"mutation-chance"
0 0 24 3 2 #" ("
0 0 14 3 5 #"round"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 13 #"MUTATION-RATE"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"mutate-num"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 3 #"lim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 14 3 15 #"mutation-chance"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 15 #"random-floating"
0 0 24 3 1 #" "
0 0 14 3 3 #"lim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 1 #"n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"make-vec"
0 0 24 3 2 #" ("
0 0 14 3 10 #"mutate-num"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 13 #"GENE-AX-LIMIT"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"mutate-num"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v2"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 13 #"GENE-AY-LIMIT"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";--------------------------FITNESS FUNCTIONS------------------------"
 #"--"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; World -> LoR"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; evaluate a fitness of a rocket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"update-lor-fitness"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"obstacle"
0 0 24 3 2 #" ("
0 0 14 3 14 #"world-obstacle"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"lor"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-rocket-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"rocket"
0 0 24 3 3 #") ("
0 0 14 3 21 #"update-rocket-fitness"
0 0 24 3 1 #" "
0 0 14 3 6 #"rocket"
0 0 24 3 1 #" "
0 0 14 3 8 #"obstacle"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 3 #"lor"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; Rocket Obstacle -> Rocket"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; evaluate and update the fitness of a Rocket,"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; do not change anything if it is smaller than SUCCESS-FITNESS (succ"
 #"ess)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"update-rocket-fitness"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"obs-loc"
0 0 24 3 2 #" ("
0 0 14 3 15 #"obstacle-center"
0 0 24 3 1 #" "
0 0 14 3 3 #"obs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"update-fitness-field"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 10 #"obs-center"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 11 #"make-rocket"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rocket-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 10 #"rocket-vel"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 10 #"rocket-dna"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 5 #"round"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 14 #"rocket-fitness"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 23 #"evaluate-rocket-fitness"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rocket-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 14 3 10 #"obs-center"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 12 #"rocket-ticks"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 20 #"update-fitness-field"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 7 #"obs-loc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Vec Vec -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; Calculate the fitness based on the rocket's position to Target's"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; Max distance represents FITNESS-BASE,"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; minimum distance represents (FITNESS-BASE + FITNESS-RANGE)"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; Also, if the rocket has passed the obstacle towards the target,"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; its fitness gets a bonus"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 23 #"evaluate-rocket-fitness"
0 0 24 3 1 #" "
0 0 14 3 10 #"rocket-pos"
0 0 24 3 1 #" "
0 0 14 3 10 #"obs-center"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"distance-to-target"
0 0 24 3 2 #" ("
0 0 14 3 15 #"vector-distance"
0 0 24 3 1 #" "
0 0 14 3 15 #"TARGET-POSITION"
0 0 24 3 1 #" "
0 0 14 3 10 #"rocket-pos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"normalized-fitness"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 22 #"MAX-DISTANCE-TO-TARGET"
0 0 24 3 1 #" "
0 0 14 3 18 #"distance-to-target"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 14 3 22 #"MAX-DISTANCE-TO-TARGET"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"scaled-fitness"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 12 #"FITNESS-BASE"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"round"
0 0 24 3 2 #" ("
0 0 14 3 14 #"inexact->exact"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 18 #"normalized-fitness"
0 0 24 3 1 #" "
0 0 14 3 13 #"FITNESS-RANGE"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"powered-fitness"
0 0 24 3 2 #" ("
0 0 14 3 5 #"round"
0 0 24 3 2 #" ("
0 0 14 3 14 #"inexact->exact"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 14 3 14 #"scaled-fitness"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"obs-to-rocket-vec"
0 0 24 3 2 #" ("
0 0 14 3 7 #"vector-"
0 0 24 3 1 #" "
0 0 14 3 10 #"rocket-pos"
0 0 24 3 1 #" "
0 0 14 3 10 #"obs-center"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"obs-to-target-vec"
0 0 24 3 2 #" ("
0 0 14 3 7 #"vector-"
0 0 24 3 1 #" "
0 0 14 3 15 #"TARGET-POSITION"
0 0 24 3 1 #" "
0 0 14 3 10 #"obs-center"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"passed-obstacle?"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 11 #"dot-product"
0 0 24 3 1 #" "
0 0 14 3 17 #"obs-to-rocket-vec"
0 0 24 3 1 #" "
0 0 14 3 17 #"obs-to-target-vec"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"checked-fitness"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 16 #"passed-obstacle?"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 21 #"PASS-OBSTACLE-FITNESS"
0 0 24 3 1 #" "
0 0 14 3 15 #"powered-fitness"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 14 3 15 #"powered-fitness"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 15 #"checked-fitness"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; ---------------ROCKET-LIST INITIATION FUNCTIONS------------------"
 #"---------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; LODNA -> LOR"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; initiate a list of rockets located at ROCKET-INITIAL-POSITION,"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; their DNAs are determined by given LODNA"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"initiate-rocket-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"lodna"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 15 #"initiate-rocket"
0 0 24 3 1 #" "
0 0 14 3 5 #"lodna"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; DNA -> Rocket"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; Initiate a rocket with given DNA,"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; Initial fitness and position"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"initiate-rocket"
0 0 24 3 1 #" "
0 0 14 3 3 #"dna"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"make-rocket"
0 0 24 3 1 #" "
0 0 14 3 23 #"ROCKET-INITIAL-POSITION"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 16 #"INITIAL-VELOCITY"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 3 #"dna"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 15 #"INITIAL-FITNESS"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; ---------------GENETICS INITIATION FUNCTIONS---------------------"
 #"------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; Number -> LODNA"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; Initiate a list of n randomly"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; generated DNAs, for initiating list of rockets"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"initiate-lodna"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 12 #"initiate-DNA"
0 0 24 3 1 #" "
0 0 14 3 8 #"LIFESPAN"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Number -> DNA"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; make a DNA containing n randomly generated gene vectors"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"initiate-DNA"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 11 #"random-gene"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; ??? -> Vec"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; Generate a random gene with constrained"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; range for acceleration fields"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"random-gene"
0 0 24 3 1 #" "
0 0 14 3 4 #"void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"random-vec"
0 0 24 3 1 #" "
0 0 14 3 13 #"GENE-AX-LIMIT"
0 0 24 3 1 #" "
0 0 14 3 13 #"GENE-AY-LIMIT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; ??? -> Vec"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; Generate a random velocity vector"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; with constrained range its fields"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"random-vel"
0 0 24 3 1 #" "
0 0 14 3 4 #"void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"random-vec"
0 0 24 3 1 #" "
0 0 14 3 10 #"VELX-LIMIT"
0 0 24 3 1 #" "
0 0 14 3 10 #"VELY-LIMIT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; Number Number -> Vec"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; generate a randome gene, the values are"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; centered at 0, with limit of variance determined by input numbers"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"random-vec"
0 0 24 3 1 #" "
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"make-vec"
0 0 24 3 2 #" ("
0 0 14 3 15 #"random-floating"
0 0 24 3 1 #" "
0 0 14 3 2 #"n1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 15 #"random-floating"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; Number -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; Returns a random floating number ranging from"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; -0.1n to 0.1n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"random-floating"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.01"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cos"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 2 #"pi"
0 0 24 3 1 #" "
0 0 21 3 3 #"180"
0 0 24 3 3 #") ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 3 #"181"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";; ---------------------------VEC HELPER FUNCTIONS------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; Vec Vec -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; Compute the dot product between two vectors"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"dot-product"
0 0 24 3 1 #" "
0 0 14 3 4 #"vec1"
0 0 24 3 1 #" "
0 0 14 3 4 #"vec2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"vec-field"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 11 #"vec-combine"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"vec1"
0 0 24 3 1 #" "
0 0 14 3 4 #"vec2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; Vec Vec -> Vec"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; subtract the coordinates of two vectors"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";Vec Vec -> Vec"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"vector-"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 6 #"second"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"vec-combine"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 6 #"second"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; Vec Vec -> Vec"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; adds the coordinate of two vectors"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";Vec Vec -> Vec"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"vector+"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 6 #"second"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"vec-combine"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 6 #"second"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; [Number Number -> Number] Vec -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; Apply given function to the two fields of"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; Vector, and return the result number"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"vec-field"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v1"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 3 #") ("
0 0 14 3 6 #"vec-v2"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; [Number Number -> Number] Vec Vec -> Vec"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; Add the corresponding fields of two Vecs"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"vec-combine"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 4 #"vec1"
0 0 24 3 1 #" "
0 0 14 3 4 #"vec2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"make-vec"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v1"
0 0 24 3 1 #" "
0 0 14 3 4 #"vec1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"vec-v1"
0 0 24 3 1 #" "
0 0 14 3 4 #"vec2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v2"
0 0 24 3 1 #" "
0 0 14 3 4 #"vec1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"vec-v2"
0 0 24 3 1 #" "
0 0 14 3 4 #"vec2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; [Number Number -> Number] Vec Num -> Vec"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; Do the specified arithmatics to each field of vec"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"vec-calculate"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"vec-combine"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-vec"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; Vec Vec -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; Calculates the distance between two vectors,"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; by treating them as points only"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"vector-distance"
0 0 24 3 1 #" "
0 0 14 3 4 #"vec1"
0 0 24 3 1 #" "
0 0 14 3 4 #"vec2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"vec-magnitude"
0 0 24 3 2 #" ("
0 0 14 3 11 #"vec-combine"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"vec1"
0 0 24 3 1 #" "
0 0 14 3 4 #"vec2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Vec -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; Returns the magnitude of the vector"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"vec-magnitude"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"sqrt"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sqr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 3 #"sqr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vec-v2"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"DISTANCES-TO-CORNERS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 15 #"vector-distance"
0 0 24 3 1 #" "
0 0 14 3 15 #"TARGET-POSITION"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #")) "
0 0 14 3 15 #"LIST-OF-CORNERS"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"MAX-DISTANCE-TO-TARGET"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 2 #") "
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 20 #"DISTANCES-TO-CORNERS"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0           0
